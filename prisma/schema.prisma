generator client {
  provider = "prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users table
model User {
  id     String @id @default(cuid())
  email  String @unique
  name   String 
  password String
  role   String @default("user")

  sessions Session[]
  accounts Account[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("sessions")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Profiles table
model Profile {
  id        String @id @default(cuid())
  userId    String @unique
  displayName String? 
  avatarUrl String? 

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  stations Station[]
}

// Stations table
model Station {
  id          String   @id @default(cuid())
  name        String
  description String?
  genre       String   @default("Various")
  userId      String   @map("user_id")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  media    Media[]
  playlists Playlist[]
  streams  Stream[]
}

// Media table
model Media {
  id          String   @id @default(cuid())
  stationId   String   @map("station_id")
  uniqueId    String   @unique
  title       String
  artist      String
  album       String?
  path        String
  length      Int      @default(0)
  isVisible   Boolean  @default(true)
  isPlayable  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  station Station @relation(fields: [stationId], references: [id], onDelete: Cascade)
}

// Playlists table
model Playlist {
  id          String         @id @default(cuid())
  stationId   String         @map("station_id")
  name        String
  description String?
  isDefault   Boolean        @default(false)
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  station      Station       @relation(fields: [stationId], references: [id], onDelete: Cascade)
  playlistMedia PlaylistMedia[]

  @@map("playlists")
}

// PlaylistMedia junction
model PlaylistMedia {
  id          String   @id @default(cuid())
  playlistId  String   @map("playlist_id")
  mediaId     String   @map("media_id")
  position    Int      @default(0)

  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  media    Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@unique([playlistId, position])
  @@map("playlist_media")
}

// Stream table
model Stream {
  id                 String   @id @default(cuid())
  stationId          String   @map("station_id")
  mountPoint         String?
  bitrate            Int?
  format             String?
  maxListeners       Int?     @default(100)
  currentListeners   Int?     @default(0)
  peakListeners      Int?     @default(0)
  status             String?  @default("offline")
  currentSongTitle   String?
  currentSongArtist  String?
  connectedTime      Int?     @default(0)
  lastMetadataUpdate DateTime? @updatedAt

  station Station @relation(fields: [stationId], references: [id], onDelete: Cascade)
}

// ListenerRequest table
model ListenerRequest {
  id          String   @id @default(cuid())
  stationId   String?  @map("station_id")
  songTitle   String
  requestedBy String?
  played      Boolean  @default(false)
  createdAt   DateTime @default(now())

  station Station? @relation(fields: [stationId], references: [id], onDelete: SetNull)
}
